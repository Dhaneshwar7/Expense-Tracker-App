process.env.MONGO_URL

'mongodb://127.0.0.1:27017/ExpenseApp'

inline fold extension mohamad almairi


console.log(require('dotenv').config());





const uploadOnCloudinary = async (localFilePath) => {
    try {
        if (!localFilePath) return null
        //upload the file on cloudinary
        const response = await cloudinary.uploader.upload(localFilePath, {
            resource_type: "auto"
        })
        // file has been uploaded successfull
        //console.log("file is uploaded on cloudinary ", response.url);
        fs.unlinkSync(localFilePath)
        return response;

    } catch (error) {
        fs.unlinkSync(localFilePath) // remove the locally saved temporary file as the upload operation got failed
        return null;
    }
}



router.get('/search-expenses', isLoggedIn, async function (req, res, next) {
	 try {
			let { expenses } = await req.user.populate('expenses');
	
			expenses = expenses.filter( (e) => {
				console.log(e);
				return e[req.query.key] == req.query.value
			});
			res.render('transaction', { admin: req.user, expenses });
		} catch (error) {
			console.log(error);
			res.send(error);
		}
});

router.get('/search-expenses', isLoggedIn, async function (req, res, next) {
	try {
		let search = '';
		if (req.query.search) {
			search = req.query.search;
		}
		let expenses = function () {
			expenses = req.user.populate('expenses');
			expenses = expenses.find({
				$or: [
					{ amount: { $regex: '.*' + search + '.*', $options: 'i' } },
					{ remark: { $regex: '.*' + search + '.*', $options: 'i' } },
					{ category: { $regex: '.*' + search + '.*', $options: 'i' } },
					{ paymentmode: { $regex: '.*' + search + '.*', $options: 'i' } },
				],
			});
			return expenses;
		};

		res.render('transaction', { admin: req.user, expenses });
	} catch (error) {
		console.log(error);
		res.send(error);
	}
});





router.post(
	'/uploadimg',
	isLoggedIn,
	upload.single('image'),
	async function (req, res, next) {
		const onUser = await User.findOne({ username: req.session.passport.user });
		console.log(onUser);
		try {
			const result = await cloudinary.uploader.upload(req.file.path, {
				public_id: `${onUser._id}_logo`,
			});
			req.file.filename = result.url;
			onUser.logo = req.file.filename;
			onUser.save().then(function () {
				res.redirect('back');
			});
		} catch (error) {
			console.log(error);	
		}
	}
);





const expenses = User.findOne({
			username: req.session.passport.user,
		}).populate({
			path: 'expenses',
			populate: {
				path: 'amount remark category paymentmode',
				$or: [
					{ amount: { $regex: '.*' + search + '.*', $options: 'i' } },
					{ remark: { $regex: '.*' + search + '.*', $options: 'i' } },
					{ category: { $regex: '.*' + search + '.*', $options: 'i' } },
					{ paymentmode: { $regex: '.*' + search + '.*', $options: 'i' } },
				]
			},
		});




        router.get('/transaction', isLoggedIn, async function (req, res, next) {
	try {
		let { expenses } = await req.user.populate('expenses');
		let { income } = await req.user.populate('income');
		// console.log(req.user, expenses, income);
		

		res.render('transaction', { admin: req.user, expenses, income });
	} catch (error) {
		res.send(error);
	}
});



let search='';
		if(!req.query.search){
			search = req.query.search
		}
		const expenses = User.findOne({
			username: req.session.passport.user,
		}).populate({
			path: 'expenses',
			populate: {
				path: 'amount remark category paymentmode',
				$or: [
					{ amount: { $regex: '.*' + search + '.*', $options: 'i' } },
					{ remark: { $regex: '.*' + search + '.*', $options: 'i' } },
					{ category: { $regex: '.*' + search + '.*', $options: 'i' } },
					{ paymentmode: { $regex: '.*' + search + '.*', $options: 'i' } },
				]
			},
		});
		res.json(expenses)







        const resul = expenses.map(function(exp){
		return exp.createdAt;
	})
		console.log(expenses);
		console.log(resul);